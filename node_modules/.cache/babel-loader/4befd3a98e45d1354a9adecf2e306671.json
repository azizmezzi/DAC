{"ast":null,"code":"import _classCallCheck from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/aziz/Bureau/ap/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/aziz/Bureau/ap/src/views/StatistiqueView/statistique/statSpecifique.js\";\n\n/* eslint-disable react/no-access-state-in-setstate */\n\n/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react'; // Import fusioncharts.js files from fusioncharts module\n\nimport FusionCharts from 'fusioncharts'; // Import the timeseries file from fusioncharts module\n\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries'; // Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\n\nimport ReactFC from 'react-fusioncharts';\nimport { Row, Card, CardHeader, CardBody } from 'shards-react';\nimport FooterStat from './Footer';\nimport { Config } from '../../../configue'; // Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\n\nReactFC.fcRoot(FusionCharts, TimeSeries); // This is the remote url to fetch the data.\n// This is the remote url to fetch the schema.\n\nvar schemaFetch = [{\n  name: 'Time',\n  type: 'date',\n  format: '%Y-%m-%d'\n}, {\n  name: 'progression',\n  type: 'number'\n}];\n\nvar ColumnChartTimeAxis =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColumnChartTimeAxis, _Component);\n\n  function ColumnChartTimeAxis(props) {\n    var _this;\n\n    _classCallCheck(this, ColumnChartTimeAxis);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnChartTimeAxis).call(this, props));\n\n    _this.statistiquePostMethode = function (stat) {\n      var post = JSON.stringify({\n        idCow: JSON.stringify(stat.idCow),\n        idDAC: JSON.stringify(stat.idDAC),\n        startDate: JSON.stringify(stat.startDate),\n        endDate: JSON.stringify(stat.endDate)\n      }); // eslint-disable-next-line no-useless-concat\n\n      var formbody = [\"\".concat('post' + '=').concat(post)]; // eslint-disable-next-line no-undef\n\n      var data = fetch(\"\".concat(Config.url, \"/Log/stat\"), {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded' // <-- Specifying the Content-Type\n\n        },\n        body: formbody // <-- Post parameters\n\n      }).then(function (responseText) {\n        return responseText.json();\n      }).catch(function (error) {\n        console.error(error);\n      });\n      return data;\n    };\n\n    _this.dataSet = function (data) {\n      console.log('data');\n      console.log(data);\n\n      _this.updateDataTable(data);\n    };\n\n    _this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '100%',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'statistique specifique '\n          },\n          yAxis: [{\n            plot: {\n              value: 'progression',\n              type: 'column'\n            },\n            format: {\n              suffix: '(g)'\n            },\n            title: 'progression'\n          }],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    }; // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n\n    _this.createDataTable = _this.createDataTable.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // eslint-disable-next-line react/sort-comp\n\n\n  _createClass(ColumnChartTimeAxis, [{\n    key: \"createDataTable\",\n    value: function createDataTable(dataFetch) {\n      var _this2 = this;\n\n      Promise.all([dataFetch, schemaFetch]).then(function (res) {\n        var data = res[0];\n        var schema = res[1]; // First we are creating a DataStore\n\n        var fusionDataStore = new FusionCharts.DataStore(); // After that we are creating a DataTable by passing our data and schema as arguments\n\n        var fusionTable = fusionDataStore.createDataTable(data, schema); // Afet that we simply mutated our timeseries datasource by attaching the above\n        // DataTable into its data property.\n\n        var timeseriesDs = Object.assign({}, _this2.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n\n        _this2.setState({\n          timeseriesDs: timeseriesDs\n        });\n      });\n    }\n  }, {\n    key: \"updateDataTable\",\n    value: function updateDataTable(dataFetch) {\n      var _this3 = this;\n\n      Promise.all([dataFetch, schemaFetch]).then(function (res) {\n        var data = res[0];\n        var schema = res[1]; // First we are creating a DataStore\n\n        var fusionDataStore = new FusionCharts.DataStore(); // After that we are creating a DataTable by passing our data and schema as arguments\n\n        var fusionTable = fusionDataStore.createDataTable(data, schema); // Afet that we simply mutated our timeseries datasource by attaching the above\n        // DataTable into its data property.\n\n        var timeseriesDs = Object.assign({}, _this3.state.timeseriesDs);\n        timeseriesDs.dataSource.data = fusionTable;\n\n        _this3.setState({\n          timeseriesDs: timeseriesDs\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    // We are creating the DataTable immidietly after the component is mounted\n    // eslint-disable-next-line react/sort-comp\n    value: function componentDidMount() {\n      var _this4 = this;\n\n      var v = {\n        idCow: 0,\n        idDAC: 0,\n        startDate: '',\n        endDate: ''\n      };\n      this.statistiquePostMethode(v).then(function (res) {\n        _this4.createDataTable(res.data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Card, {\n        small: true,\n        className: \"h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        className: \"border-bottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"m-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"statisque sur le systeme\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(CardBody, {\n        className: \"pt-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(ReactFC, Object.assign({}, this.state.timeseriesDs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }))))), React.createElement(FooterStat, {\n        dataSet: this.dataSet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ColumnChartTimeAxis;\n}(Component);\n\nexport default ColumnChartTimeAxis;","map":{"version":3,"sources":["/home/aziz/Bureau/ap/src/views/StatistiqueView/statistique/statSpecifique.js"],"names":["React","Component","FusionCharts","TimeSeries","ReactFC","Row","Card","CardHeader","CardBody","FooterStat","Config","fcRoot","schemaFetch","name","type","format","ColumnChartTimeAxis","props","statistiquePostMethode","stat","post","JSON","stringify","idCow","idDAC","startDate","endDate","formbody","data","fetch","url","method","headers","Accept","body","then","responseText","json","catch","error","console","dataSet","log","updateDataTable","state","timeseriesDs","renderAt","width","dataSource","chart","showLegend","caption","text","yAxis","plot","value","suffix","title","createDataTable","bind","dataFetch","Promise","all","res","schema","fusionDataStore","DataStore","fusionTable","Object","assign","setState","v"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable react/destructuring-assignment */\nimport React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\nimport { Row, Card, CardHeader, CardBody } from 'shards-react';\nimport FooterStat from './Footer';\nimport { Config } from '../../../configue';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\n// This is the remote url to fetch the data.\n// This is the remote url to fetch the schema.\nconst schemaFetch = [\n  {\n    name: 'Time',\n    type: 'date',\n    format: '%Y-%m-%d'\n  },\n  {\n    name: 'progression',\n    type: 'number'\n  }\n];\nclass ColumnChartTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '100%',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'statistique specifique '\n          },\n          yAxis: [\n            {\n              plot: {\n                value: 'progression',\n                type: 'column'\n              },\n              format: {\n                suffix: '(g)'\n              },\n              title: 'progression'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  // eslint-disable-next-line react/sort-comp\n  createDataTable(dataFetch) {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  updateDataTable(dataFetch) {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  statistiquePostMethode = stat => {\n    const post = JSON.stringify({\n      idCow: JSON.stringify(stat.idCow),\n      idDAC: JSON.stringify(stat.idDAC),\n      startDate: JSON.stringify(stat.startDate),\n      endDate: JSON.stringify(stat.endDate)\n    });\n    // eslint-disable-next-line no-useless-concat\n    const formbody = [`${'post' + '='}${post}`];\n    // eslint-disable-next-line no-undef\n    const data = fetch(`${Config.url}/Log/stat`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded' // <-- Specifying the Content-Type\n      },\n      body: formbody // <-- Post parameters\n    })\n      .then(responseText => {\n        return responseText.json();\n      })\n      .catch(error => {\n        console.error(error);\n      });\n    return data;\n  };\n\n  // We are creating the DataTable immidietly after the component is mounted\n  // eslint-disable-next-line react/sort-comp\n  componentDidMount() {\n    const v = { idCow: 0, idDAC: 0, startDate: '', endDate: '' };\n    this.statistiquePostMethode(v).then(res => {\n      this.createDataTable(res.data);\n    });\n  }\n\n  dataSet = data => {\n    console.log('data');\n    console.log(data);\n    this.updateDataTable(data);\n  };\n\n  render() {\n    return (\n      <Card small className=\"h-100\">\n        <CardHeader className=\"border-bottom\">\n          <h6 className=\"m-0\">statisque sur le systeme</h6>\n        </CardHeader>\n        <br />\n        <br />\n        <br />\n        <CardBody className=\"pt-0\">\n          <Row>\n            <div className=\"App\">\n              <ReactFC {...this.state.timeseriesDs} />\n            </div>\n          </Row>\n        </CardBody>\n        <FooterStat dataSet={this.dataSet} />\n      </Card>\n    );\n  }\n}\n\nexport default ColumnChartTimeAxis;\n"]},"metadata":{},"sourceType":"module"}